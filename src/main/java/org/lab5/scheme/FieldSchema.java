package org.lab5.scheme;

import org.lab5.annotations.*;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.stream.Collectors;

import static org.lab5.IO.InputClass.getDeclaredMethod;
import static org.lab5.IO.InputClass.getPrimitiveClass;
/**
 * Represents the schema of a field in a class. Stores information about the field such as its name, type,
 * prompt, and annotations.
 */
public class FieldSchema {
    /**
     * A flag indicating whether the field's type is an enumeration.
     */
    public final boolean isEnum;
    /**
     * A flag indicating whether the field's type is a primitive.
     */
    public final boolean isPrimitive;
    /**
     * The reference to the field object.
     */
    public final Field fieldReference;
    /**
     * A flag indicating whether the field is auto-generated.
     */
    public final boolean autoGenerated;
    /**
     * The minimum value allowed for the field.
     */
    public Integer min = null;
    /**
     * The maximum value allowed for the field.
     */
    public Integer max = null;
    /**
     * A flag indicating whether the field can be null.
     */
    public boolean notNull = false;
    /**
     * The name of the field.
     */
    String name;
    /**
     * The valueOf method of the field's type.
     */
    Method valueOf;
    /**
     * The type of the field.
     */
    Class type;
    /**
     * The prompt for the field.
     */
    String prompt;
    /**
     * Constructs a FieldSchema object for the given field.
     * @param fieldReference The reference to the field object.
     */
    public FieldSchema(Field fieldReference) {

        this.fieldReference = fieldReference;
        this.fieldReference.setAccessible(true);
        type = fieldReference.getType();
        name = fieldReference.getName();

        if (fieldReference.isAnnotationPresent(CustomName.class))
            name = fieldReference.getAnnotation(CustomName.class).name();

        prompt = "";

        if (fieldReference.isAnnotationPresent(Prompt.class))
            prompt = fieldReference.getAnnotation(Prompt.class).description();

        if (fieldReference.isAnnotationPresent(Min.class))
            min = fieldReference.getAnnotation(Min.class).min();

        if (fieldReference.isAnnotationPresent(Max.class))
            max = fieldReference.getAnnotation(Max.class).max();

        notNull = fieldReference.isAnnotationPresent(NotNull.class);


        if (type.isEnum()) {
            String enumValues = Arrays.stream(type.getEnumConstants()).
                    map(Object::toString)
                    .collect(Collectors.joining(",", "(", ") "));
            prompt += enumValues;
        }

        isEnum = type.isEnum();
        isPrimitive = type.isPrimitive();
        valueOf = getDeclaredMethod(type, "valueOf", String.class);
        if (type.isPrimitive()) {
            Class<?> primitive = getPrimitiveClass(type.getName());
            try {
                assert primitive != null;
                valueOf = primitive.getMethod("valueOf", String.class);
            } catch (NoSuchMethodException e) {
                throw new RuntimeException(e);
            }
        }
        autoGenerated = fieldReference.isAnnotationPresent(AutoGenerated.class);
    }
    /**
     * Returns the name of the field.
     * @return The name of the field.
     */
    public String getName() {
        return name;
    }
    /**
     * Returns the valueOf method of the field's type.
     * @return The valueOf method of the field's type.
     */
    public Method getValueOf() {
        return valueOf;
    }
    /**
     * Returns the type of the field.
     * @return The type of the field.
     */
    public Class getType() {
        return type;
    }
    /**
     * Returns the reference to the field object.
     * @return The reference to the field object.
     */
    public Field getFieldReference() {
        return fieldReference;
    }
    /**
     * Returns the prompt of the field.
     * @return The prompt of the field.
     */
    public String getPrompt() {
        return prompt;
    }
    /**
     * Returns true if field is autogenerated.
     * @return true if field is autogenerated.
     */
    public boolean isAutoGenerated() {
        return autoGenerated;
    }
}
